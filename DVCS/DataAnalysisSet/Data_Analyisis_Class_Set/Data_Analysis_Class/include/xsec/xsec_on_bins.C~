
void BDT::xsec_on_bins(TString Data, int NBinsPhi=0, int bin=0, bool build=true, bool eta=false)
{
  gStyle->SetOptFit(0);
  gStyle->SetOptTitle(0);

  std::ifstream inputFile;
  std::string line;
  std::vector<double> xValues;
  std::vector<double> yValues;
  std::vector<double> yErrors;
  std::vector<double> xErrors;
  std::vector<double> phi_bins;

  double x, y, yErr;
  double binWidth;
  double xErr;
  int numPoints;

  
  int bin_number=1;
  TString Folder_old=Folder;
    
  int k0=0, kN=64;
  if(bin!=0)
    {
      bin_number=bin;
      k0=bin-1;
      kN=bin;      
    }
    

  for(int k=k0;k<kN;k++)
    {

      if(NBinsPhi==0)
	{
	  NBinsPhi=Nphibins[k];
	}

      TCut cut_bin = Mbins[k];
      std::cout<<Form("\n\n t_Ph>%f && t_Ph<%f && strip_Q2>%f && strip_Q2<%f && strip_Xbj>%f && strip_Xbj<%f",bins[k][0],bins[k][1],bins[k][2],bins[k][3],bins[k][4],bins[k][5])<<endl;
      boundaries.clear();
      boundaries.push_back(bins[k][0]);
      boundaries.push_back(bins[k][1]);
      boundaries.push_back(bins[k][2]);
      boundaries.push_back(bins[k][3]);
      boundaries.push_back(bins[k][4]);
      boundaries.push_back(bins[k][5]);
      Folder = Folder_old + Form("bin_%i/",bin_number);
      gSystem->Exec(TString("mkdir -p ") + Folder);

      if(build)
	{
	  Training(cut + cut_bin, DVCS, Pi0, Vars);
	  Training_vars(Data, DVCS, Pi0, cut + cut_bin);
	  Add_BDT_var(cut + cut_bin, Data, TData, Vars);
	  Add_BDT_var(cut + cut_bin, DVCS, TDVCS, Vars);
	  Add_BDT_var(cut + cut_bin, Pi0, TPi0, Vars);
	  Get_BDT_Score();
	  //Add_BDT_var_float(cut + cut_bin, Pi0, TPi0);
	  Explore(TData, TDVCS, cut + cut_bin);

	  Add_BDT_var(cut + cut_bin, sim_pi_as_dvcs, "Tested_1gamma.root", Vars);
	  Add_BDT_var(cut + cut_bin, sim_pi_as_dvcs_1, "Tested_1gamma_1.root", Vars);
	  Add_BDT_var(cut + cut_bin, sim_eta_as_dvcs, "Tested_1gamma_eta.root", Vars);

	  Add_BDT_var(cut + cut_bin, BM_Sim, TBM_Sim, Vars);
	  Add_BDT_var(cut + cut_bin, RC_Sim, TRC_Sim, Vars);

	  Filter(TBM_Sim, cut + cut_bin + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)), TString("f") + TBM_Sim);
	  Filter(TRC_Sim, cut + cut_bin + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)), TString("f") + TRC_Sim);
	  Filter(TData, cut + cut_bin + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)), TString("Data_NP_Theta_g_5.root"));
      
	  Resolution_Match(cut + cut_bin, TString("Data_NP_Theta_g_5.root"), TString("f") + TBM_Sim);
	  gSystem->Exec(TString("mv ") + Folder + TString("Reweighting_Plots ") + Folder + TString("Reweighting_Plots_BM"));
	  Resolution_Match(cut + cut_bin, TString("Data_NP_Theta_g_5.root"), TString("f") + TRC_Sim);
	  gSystem->Exec(TString("mv ") + Folder + TString("Reweighting_Plots ") + Folder + TString("Reweighting_Plots_RC"));

	  gSystem->Exec(TString("rm ") + Folder + TString("f") + TBM_Sim);
	  gSystem->Exec(TString("rm ") + Folder + TString("f") + TRC_Sim);
	  gSystem->Exec(TString("rm ") + Folder + TBM_Sim);
	  gSystem->Exec(TString("rm ") + Folder + TRC_Sim);
	}

      //Refinement cuts
      //To be used at the end
      //cut_ref=Rcuts[k];
      TCut cut_ref = TCut("bestCandidateFlag==1");
      //Filter(TData, cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)), TString("Data_NP_Theta_g_5.root"));
      
      TH1 *Orig;
      TH1 *Most;
      TH1 *Maxi;

      std::cout<<"\n Get Contamination BDT way"<<endl;
      Get_Contamination(cut + cut_bin, BDT_value);

      std::cout<<"\n Get Contamination Mostafa way"<<endl;      
      Most=Get_Contamination_Mostafa(cut + cut_bin + cut_ref, BDT_value,NBinsPhi, eta); //Cut ref is coded inside

      std::cout<<"\n Get Contamination Maxime way"<<endl;
      Maxi=Maxime(cut + cut_bin + cut_ref, BDT_value, bin_number,NBinsPhi);

      Orig=Single_BSA("Data_NP_Theta_g_5.root",NBinsPhi);

      gStyle->SetOptFit(0);
      gStyle->SetOptTitle(0);
      Orig->SetAxisRange(-1., 1.,"Y");
      Orig->SetMarkerColor(kBlack);
      Orig->SetLineColor(kBlack);

      Most->SetAxisRange(-1., 1.,"Y");
      Most->SetMarkerColor(kBlue);
      Most->SetLineColor(kBlue);
      if(Most->GetFunction("fitf"))
      	Most->GetFunction("fitf")->SetLineColor(kWhite);

      Maxi->SetAxisRange(-1., 1.,"Y");
      Maxi->SetMarkerColor(kRed);
      Maxi->SetLineColor(kRed);
      if(Maxi->GetFunction("fitf"))
      	Maxi->GetFunction("fitf")->SetLineColor(kWhite);

      Most->SetTitle("Method 1");
      Maxi->SetTitle("Method 2");
	      
      TCanvas* c3 = new TCanvas("c3","Histograms");
      Orig->SetTitle("Before");
      Orig->SetName("Before");
      
      //Transform BSA to event count
      TH1* NOrig = BSA2Nev(Orig);
      TH1* NMost = BSA2Nev(Most);
      TH1* NMaxi = BSA2Nev(Maxi);

      NOrig->SetMarkerColor(kBlack);
      NOrig->SetLineColor(kBlack);

      NMost->SetMarkerColor(kBlue);
      NMost->SetLineColor(kBlue);

      NMaxi->SetMarkerColor(kRed);
      NMaxi->SetLineColor(kRed);

      NMost->SetTitle("Method 1");
      NMaxi->SetTitle("Method 2");
      
      NOrig->Draw();
      NMost->Draw("SAME");
      NMaxi->Draw("SAME");
      c3->BuildLegend();
      c3->Print(Folder + TString("Background_subtraction.pdf"));
      delete c3;

      
      TCanvas* c4 = new TCanvas("c4","Histograms");
      NMost->Draw("E0");
      NMaxi->Draw("SAME, E0");
      c4->BuildLegend();
      c4->Print(Folder + TString("RGA_vs_This.pdf"));
      delete c4;

      gStyle->SetOptTitle(1);
      Get_excl_vars(cut + cut_bin + cut_ref);
      //Compare_three(cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT>%f",BDT_value)), "TMaxime_pi0.root", "TMostafa_pi0.root");

	      
      //Corrections	      
      TH1F* F_Acc = Acc_correction( (cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)))*TCut("rWeight"), TString("wf") + TBM_Sim, BDT_value, NBinsPhi);
      F_Acc->SetName("F_Acc");
      TH1F* F_rad = Frad((cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)))*TCut("rWeight"), TString("wf") + TRC_Sim, BDT_value, NBinsPhi);
      F_rad->SetName("F_Rad");

      //TH1F* F_bin1 = Fbin1(bin, (cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)))*TCut("rWeight"), TString("wf") + TRC_Sim, BDT_value, xmean1, Qmean1, tmean1);      
      //F_bin1->SetName("F_Bin1");
      //TH1F* F_bin2 = Fbin2(bin, (cut + cut_bin + cut_ref + TCut(Form("_strip_Nuc_BDT > %f",BDT_value)))*TCut("rWeight"), TString("wf") + TRC_Sim, BDT_value, xmean1, Qmean1, tmean1);      
      //F_bin2->SetName("F_Bin2");
      TH1F* F_bin = F_bin_KM_model(bin);
      F_bin->SetName("F_Bin");
	      
      //Final xsection 
      //Plot Sangbaek BSA
      inputFile.open(extXSEC + Form("bin_%i.txt",bin_number)); // Replace with the name of the block file you want to read
      xValues.clear();
      yValues.clear();
      while (std::getline(inputFile, line)) {
	std::istringstream iss(line);
	iss >> x >> y;
        
	xValues.push_back(x);
	yValues.push_back(y);
      }
      numPoints = xValues.size();
      inputFile.close();
      TGraph* graph = new TGraph(numPoints, xValues.data(), yValues.data());
      graph->SetMarkerColor(kCyan);
      graph->SetLineColor(kCyan);
      graph->SetLineWidth(2);
      graph->SetTitle("KM15");

      //Corrections
      double L=40.09*1e6 ; //40.09 fb-1 in nb-1
      double F_eff=0.77/(7e5);
      
      
      TH1F *xsec1 = new TH1F("xsec1","xsec1",NBinsPhi,0,360);
      TH1F *xsec2 = new TH1F("xsec2","xsec2",NBinsPhi,0,360);
      
      xsec1->Divide(NMost, F_Acc,1,1);
      xsec2->Divide(NMaxi, F_Acc,1,1);

      xsec1->Divide(xsec1, F_rad,1,1);
      xsec2->Divide(xsec2, F_rad,1,1);

      xsec1->Divide(xsec1, F_bin,1,1);
      xsec2->Divide(xsec2, F_bin,1,1);

      for(int t=1; t<=NBinsPhi; t++)
	{
	  xsec1->SetBinError(t,xsec1->GetBinContent(t)*sqrt( pow(NMost->GetBinError(t)/NMost->GetBinContent(t),2) + pow(F_Acc->GetBinError(t)/F_Acc->GetBinContent(t),2) + pow(F_rad->GetBinError(t)/F_rad->GetBinContent(t),2) + pow(F_bin->GetBinError(t)/F_bin->GetBinContent(t),2) ));
	  xsec2->SetBinError(t,xsec2->GetBinContent(t)*sqrt( pow(NMaxi->GetBinError(t)/NMaxi->GetBinContent(t),2) + pow(F_Acc->GetBinError(t)/F_Acc->GetBinContent(t),2) + pow(F_rad->GetBinError(t)/F_rad->GetBinContent(t),2) + pow(F_bin->GetBinError(t)/F_bin->GetBinContent(t),2) ));
	}
      xsec1->Scale(1.0/(L*F_eff));
      xsec2->Scale(1.0/(L*F_eff));

      //root output
      TFile *outputFile = new TFile(Folder + TString("xsec_dists.root"), "RECREATE");
      // Write the histogram to the output file
      F_bin->Write();
      //F_bin1->Write();
      //F_bin2->Write();
      F_rad->Write();
      F_Acc->Write();
      xsec1->Write();
      xsec2->Write();
      NMost->Write();
      NMaxi->Write();
      NOrig->Write();
      graph->Write();
      // Close the output file
      outputFile->Close();
	      

      //Summary	      
      TCanvas* c5 = new TCanvas("c5","Histograms");
      xsec1->Draw("E0");
      xsec2->Draw("SAME, E0");
      graph->Draw("SAME l");
      c5->BuildLegend();
      c5->Print(Folder + TString("RGA_vs_This_xsec.pdf"));
      c5->Write();

      std::cout<<"SUMMARY:"<<endl;	      

      std::ofstream outFile(Folder + TString("Amplitudes.txt"));
      outFile<<"type value fit error on fit"<<endl;	      
      outFile<<"Raw "<<BSA_Amplitude<<" "<<BSA_Amplitude_fit<<" "<<BSA_Error_fit<<endl;	      
      outFile<<"Mostafa "<<BSA_Amplitude_most<<" "<<BSA_Amplitude_most_fit<<" "<<BSA_Error_most_fit<<endl;	      
      outFile<<"Maxime "<<BSA_Amplitude_maxi<<" "<<BSA_Amplitude_maxi_fit<<" "<<BSA_Error_maxi_fit<<endl;	      

      std::cout<<"type value fit"<<endl;	      
      cout<<"Raw "<<BSA_Amplitude<<" "<<BSA_Amplitude_fit<<" "<<BSA_Error_fit<<endl;	      
      cout<<"Mostafa "<<BSA_Amplitude_most<<" "<<BSA_Amplitude_most_fit<<" "<<BSA_Error_most_fit<<endl;	      
      cout<<"Maxime "<<BSA_Amplitude_maxi<<" "<<BSA_Amplitude_maxi_fit<<" "<<BSA_Error_maxi_fit<<endl;
      
      outFile<<"Entries before BDT (All/FT/FD): "<<entries_bef_BDT<<" "<<entries_bef_BDT_FT<<" "<<entries_bef_BDT_FD<<endl;
      outFile<<"Mostafa entries/estimation (bef/aft/bef_FT/aft_FT/bef_FD/aft_FD) on bin "<<bin_number<< " before/after: "<<entries_bef_most<<" "<<entries_aft_most<<" "<<entries_bef_most_FT<<" "<<entries_bef_most_FD<<" "<<boundaries.at(8)*100<<"% "<<boundaries.at(9)*100<<"%"<<" "<<boundaries.at(10)*100<<"% "<<boundaries.at(11)*100<<"%"<<" "<<boundaries.at(12)*100<<"% "<<boundaries.at(13)*100<<"%"<<endl;  
      outFile<<"Maxime  entries/estimation (bef/aft/bef_FT/aft_FT/bef_FD/aft_FD) on bin "<<bin_number<< " before/after: "<<entries_bef_maxi<<" "<<entries_aft_maxi<<" "<<entries_bef_most_FT<<" "<<entries_bef_most_FD<<" "<<boundaries.at(14)*100<<"% "<<boundaries.at(15)*100<<"% "<<boundaries.at(16)*100<<"% "<<boundaries.at(17)*100<<"%"<<" "<<boundaries.at(18)*100<<"% "<<boundaries.at(19)*100<<"%"<<endl;  
      
      std::cout<<"Entries before BDT (All/FT/FD): "<<entries_bef_BDT<<" "<<entries_bef_BDT_FT<<" "<<entries_bef_BDT_FD<<endl;
      std::cout<<"Mostafa entries/estimation (bef/aft/bef_FT/aft_FT/bef_FD/aft_FD) on bin "<<bin_number<< " before/after: "<<entries_bef_most<<" "<<entries_aft_most<<" "<<entries_bef_most_FT<<" "<<entries_bef_most_FD<<" "<<boundaries.at(8)*100<<"% "<<boundaries.at(9)*100<<"%"<<" "<<boundaries.at(10)*100<<"% "<<boundaries.at(11)*100<<"%"<<" "<<boundaries.at(12)*100<<"% "<<boundaries.at(13)*100<<"%"<<endl;  
      std::cout<<"Maxime  entries/estimation (bef/aft/bef_FT/aft_FT/bef_FD/aft_FD) on bin "<<bin_number<< " before/after: "<<entries_bef_maxi<<" "<<entries_aft_maxi<<" "<<entries_bef_most_FT<<" "<<entries_bef_most_FD<<" "<<boundaries.at(14)*100<<"% "<<boundaries.at(15)*100<<"% "<<boundaries.at(16)*100<<"% "<<boundaries.at(17)*100<<"%"<<" "<<boundaries.at(18)*100<<"% "<<boundaries.at(19)*100<<"%"<<endl;  

      bin_number+=1;

      outFile.close();
      
      delete c5;
      delete Orig;
      delete Most;
      delete Maxi;

      delete xsec1;
      delete xsec2;

      delete F_Acc;
      delete F_rad;
      delete F_bin;

      delete NOrig;
      delete NMost;
      delete NMaxi;
    }


  Folder = Folder_old;

  return;
}
